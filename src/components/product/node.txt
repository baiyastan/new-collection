import { useState } from "react";
import { FaChevronLeft, FaChevronRight } from "react-icons/fa";
import { RxDotFilled } from "react-icons/rx";

function CarouselItem() {
  const slides = [
    {
      url: "https://images.unsplash.com/photo-1531297484001-80022131f5a1?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2620&q=80",
    },
    {
      url: "https://images.unsplash.com/photo-1488590528505-98d2b5aba04b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2670&q=80",
    },
    {
      url: "https://images.unsplash.com/photo-1661961112951-f2bfd1f253ce?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2672&q=80",
    },

    {
      url: "https://images.unsplash.com/photo-1512756290469-ec264b7fbf87?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2253&q=80",
    },
    {
      url: "https://images.unsplash.com/photo-1496181133206-80ce9b88a853?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2671&q=80",
    },
  ];

  const [currentIndex, setCurrentIndex] = useState(0);
  const prevSlide = () => {
    const isFirstSlide = currentIndex === 0;
    const newIndex = isFirstSlide ? slides.length - 1 : currentIndex - 1;
    setCurrentIndex(newIndex);
  };

  const nextSlide = () => {
    const isLastSlice = currentIndex === slides.length - 1;
    const newIndex = isLastSlice ? 0 : currentIndex + 1;
    setCurrentIndex(newIndex);
  };

  const goToSlide = (slideIndex) => {
    setCurrentIndex(slideIndex);
  };

  return (
    <div className="max-w-[1400px] h-[780px] w-full m-auto py-16 px-4 relative border-4 group">
      <div
        style={{ backgroundImage: `url(${slides[currentIndex].url})` }}
        className="w-full h-full rounded-2xl bg-center bg-coder duration-500"
      ></div>
      {/* left arrow */}
      <div className="hidden group-hover:block absolute top-[50%] -translate-x-0 translate-y-[50%] left-5 text-2x1 rounded-full p-2 bg-black/20 text-white cursor-pointer">
        <FaChevronLeft onClick={prevSlide} size={30} />
      </div>
      {/* right arrow */}
      <div className="hidden group-hover:block absolute top-[50%] -translate-x-0 translate-y-[50%] right-5 text-2x1 rounded-full p-2 bg-black text-white cursor-pointer">
        <FaChevronRight onClick={nextSlide} size={30} />
      </div>
      <div className="flex top-4 justify-center py-2">
        {slides.map((slide, slideIndex) => (
          <div
            key={slideIndex}
            onClick={() => goToSlide(slideIndex)}
            className="text-2xl cursor-pointer"
          >
            <RxDotFilled />
          </div>
        ))}
      </div>
    </div>
  );
}

export default CarouselItem;


{popupOpen[el.id] && activeId === el.id && (
  <div className="popup-container">
    <div className="popup">
      <CarouselItem
        image={items.slice(0, 5).map((item) => item.avatar)}
        activeIndex={items.findIndex((item) => item.id === activeId)}
        setPopupOpen={setPopupOpen}
      />
    </div>
  </div>
)}


.popup {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 999;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: #444444;
}

.carousel-container {
  width: 1200px;
  height: 700px;
  margin-top: 100px;
  position: relative;
}

.carousel-image {
  width: 400px;
  height: 400px;
  margin: 0 auto;
}

.carousel-image img {
  width: 100%;
  height: 100%;
}

.carousel-left {
  position: absolute;
  top: 45%;
  cursor: pointer;
  color: #fff;
}

.carousel-right { 
  position: absolute;
  top: 45%;
  right: 0;
  cursor: pointer;
  color: #fff;
}

.carousel-close {
  position: absolute;
  top: 0;
  right: 0;
  color: #fff;
  cursor: pointer;
}


const [popupOpen, setPopupOpen] = useState({});

const openPopup = (id) => {
  setActiveId(id === activeId ? null : id);
  setPopupOpen((prevState) => ({ ...prevState, [id]: true }));
};

const closePopup = () => {
  setPopupOpen({});
};


style={{ zIndex: activeId === el.id ? 1 : "auto" }}

const [activeId, setActiveId] = useState(null);